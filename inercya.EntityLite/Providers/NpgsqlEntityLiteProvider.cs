/*
Copyright 2014 i-nercya intelligent software

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

using inercya.EntityLite.Builders;
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Common;
using System.Linq;
using System.Text;

namespace inercya.EntityLite.Providers
{
    public class NpgsqlEntityLiteProvider : EntityLiteProvider
    {
        public const string ProviderName = "Npgsql";

        public NpgsqlEntityLiteProvider(DataService dataService): base(dataService)
        {
        }



        string _defaultSchema;
        public override string DefaultSchema
        {
            get
            {
               if (_defaultSchema == null)
               {
                   _defaultSchema = "public";
               }
               return _defaultSchema;
            }
            set
            {
                _defaultSchema = value;
            }
        }

        protected override void AppendGetAutoincrementField(StringBuilder commandText, EntityMetadata entityMetadata)
        {
            if (entityMetadata == null) throw new ArgumentNullException(nameof(entityMetadata));
            if (commandText == null) throw new ArgumentNullException(nameof(entityMetadata));
            commandText.Append("\nRETURNING ")
                .Append(DataService.EntityLiteProvider.StartQuote)
                .Append(entityMetadata.Properties[entityMetadata.AutogeneratedFieldName].SqlField.BaseColumnName)
                .Append(DataService.EntityLiteProvider.EndQuote).Append(';');
        }

        public override string GetNextValExpression(string fullSequenceName)
        {
            return "nextval('" + fullSequenceName + "')";
        }

        private static PropertySetter NpgsqlDbTypeSetter;

        public override void SetProviderTypeToParameter(IDbDataParameter parameter, int providerType)
        {
            if (parameter == null) throw new ArgumentNullException(nameof(parameter));
            if (NpgsqlDbTypeSetter == null)
            {
                var parameterType = parameter.GetType();
                var pi = parameterType.GetProperty("NpgsqlDbType");
                if (pi == null) throw new InvalidOperationException("NpgsqlDbType property not found on type " + parameterType.FullName);
                NpgsqlDbTypeSetter = PropertyHelper.GetPropertySetter(pi);
            }
            NpgsqlDbTypeSetter(parameter, providerType);
        }
    }
}
