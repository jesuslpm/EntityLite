/*
Copyright 2014 i-nercya intelligent software

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

using inercya.EntityLite.Builders;
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Common;
using System.Linq;
using System.Text;
using inercya.EntityLite.Extensions;

namespace inercya.EntityLite.Providers
{
    public class FirebirdEntityLiteProvider : EntityLiteProvider
    {
        public const string ProviderName = "FirebirdSql.Data.FirebirdClient";

        public FirebirdEntityLiteProvider(DataService dataService): base(dataService)
        {
        }

        protected override void AppendGetAutoincrementField(StringBuilder commandText, EntityMetadata entityMetadata)
        {
            if (commandText == null) throw new ArgumentNullException(nameof(commandText));
            if (entityMetadata == null) throw new ArgumentNullException(nameof(commandText));
            commandText.Append("\nRETURNING ")
                .Append(this.StartQuote)
                .Append(entityMetadata.Properties[entityMetadata.AutogeneratedFieldName].SqlField.BaseColumnName)
                .Append(this.EndQuote).Append(';');
        }

        public override string GetNextValExpression(string fullSequenceName)
        {
            return "NEXT VALUE FOR " + fullSequenceName;
        }

        private static PropertySetter FbDbTypeSetter;

        public override void SetProviderTypeToParameter(IDbDataParameter parameter, int providerType)
        {
            if (parameter == null) throw new ArgumentNullException(nameof(parameter));
            if (FbDbTypeSetter == null)
            {
                var parameterType = parameter.GetType();
                var pi = parameterType.GetProperty("FbDbType");
                if (pi == null) throw new InvalidOperationException("NpgsqlDbType property not found on type " + parameterType.FullName);
                FbDbTypeSetter = PropertyHelper.GetPropertySetter(pi);
            }
            FbDbTypeSetter(parameter, providerType);
        }

        private static string GetFirstSkipQuery(AbstractQueryBuilder builder, DbCommand selectCommand, ref int paramIndex, int fromRowIndex, int toRowIndex)
        {
            StringBuilder commandText = new StringBuilder();
            string firstParameterName;
            var firstParam = builder.CreateIn32Parameter(toRowIndex - fromRowIndex + 1, ref paramIndex, out firstParameterName);
            selectCommand.Parameters.Add(firstParam);
            string skipParameterName;
            var skipParam = builder.CreateIn32Parameter(fromRowIndex, ref paramIndex, out skipParameterName);
            selectCommand.Parameters.Add(skipParam);
            commandText.Append("SELECT FIRST ").Append(firstParameterName).Append(" SKIP ").Append(skipParameterName).Append(' '); 
            builder.GetSelectQuery(selectCommand, ref paramIndex, commandText, 0, false);           
            var query = commandText.ToString();
            return query;
        }

        public override string GetPagedQuery(AbstractQueryBuilder builder, DbCommand selectCommand, ref int paramIndex, int fromRowIndex, int toRowIndex)
        {
            if (builder == null) throw new ArgumentNullException(nameof(builder));
            if (selectCommand == null) throw new ArgumentNullException(nameof(selectCommand));
            return GetFirstSkipQuery(builder, selectCommand, ref paramIndex, fromRowIndex, toRowIndex);
        }
    }
}
