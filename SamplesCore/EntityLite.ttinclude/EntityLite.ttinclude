<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="Microsoft.CSharp" #>
<#@ assembly name="System.Data" #>
<#@ assembly name="System.Xml" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="System.Data" #>
<#@ import namespace="System.Data.Common" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace= "System.Data.SqlClient" #>
<#@ import namespace= "System.Data.SqlTypes" #>
<#@ output extension=".cs" #>
<#@ include file ="Extensions.ttinclude" #>
<#@ include file ="Sequence.ttinclude" #>
<#@ include file ="TextTransform.ttinclude" #>
<#@ include file ="JsonType.ttinclude" #>
<#@ include file ="DataLayerGeneration.ttinclude" #>
<#@ include file ="DataServiceGeneration.ttinclude" #>
<#@ include file ="EntityGeneration.ttinclude" #>
<#@ include file ="EntitySetting.ttinclude" #>
<#@ include file ="FieldGeneration.ttinclude" #>
<#@ include file ="FieldMetadata.ttinclude" #>
<#@ include file ="EnumSetting.ttinclude" #>
<#@ include file ="EnumGeneration.ttinclude" #>
<#@ include file ="MemberVisibility.ttinclude" #>
<#@ include file ="ProcedureGeneration.ttinclude" #>
<#@ include file ="ProcedureResultSetKind.ttinclude" #>
<#@ include file ="ProcedureSetting.ttinclude" #>
<#@ include file ="TypeScriptAttributeGeneration.ttinclude" #>
<#+ 
	void Render(DataLayerGeneration generation)
	{
		using (generation)
        {
		    #>
#pragma warning disable CS8600 // Converting null literal or possible null value to non-nullable type.
#pragma warning disable CS8618 // Non-nullable field must contain a non-null value when exiting constructor
			<#+ 
            generation.Initialize();
            EntityGeneration_Render(generation);
			EnumGeneration_Render(generation);
            DataServiceGeneration_Render(generation);
            ProcedureGeneration_Render(generation);
			TypeScriptAttributeGeneration_Render(generation);
			#>
#pragma warning restore CS8600 // Converting null literal or possible null value to non-nullable type.
#pragma warning restore CS8618 // Non-nullable field must contain a non-null value when exiting constructor
			<#+
        }
	}
#>